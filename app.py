# app.py - Aplicativo principal ValueHunter com navega√ß√£o aprimorada
import streamlit as st
import logging
import os
import time
from datetime import datetime

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("valueHunter.app")

# Importa√ß√µes dos m√≥dulos do projeto - ajustadas para a estrutura real
from utils.core import (
    show_valuehunter_logo, update_purchase_button, check_payment_success, 
    apply_custom_styles, go_to_login, configure_sidebar_toggle, DATA_DIR
)
from utils.data import UserManager
from pages.dashboard import show_main_dashboard, get_league_selection, show_usage_stats
from pages.packages import show_packages_page

# Remova importa√ß√µes inexistentes e substitua por fun√ß√µes
# que voc√™ j√° tem no seu projeto
# from pages.login import show_login_page
# from pages.landing import show_landing_page

# Cria diret√≥rios necess√°rios
os.makedirs(DATA_DIR, exist_ok=True)

# Inicializa√ß√£o de configura√ß√µes globais
def initialize_app_state():
    """Inicializa o estado do aplicativo com valores padr√£o"""
    if 'initialized' not in st.session_state:
        # Estado de navega√ß√£o
        if 'page' not in st.session_state:
            st.session_state.page = 'main'  # Use 'page' em vez de 'current_page' para compatibilidade
        st.session_state.previous_page = None
        
        # Estado de autentica√ß√£o - manter valores existentes se j√° definidos
        if 'authenticated' not in st.session_state:
            st.session_state.authenticated = False
        if 'email' not in st.session_state:
            st.session_state.email = None
        
        # Configura√ß√µes e personaliza√ß√µes
        if 'debug_mode' not in st.session_state:
            st.session_state.debug_mode = False
        if 'stripe_test_mode' not in st.session_state:
            st.session_state.stripe_test_mode = True  # Modo de teste ativado por padr√£o
        
        # Estado da sidebar
        if 'sidebar_expanded' not in st.session_state:
            st.session_state.sidebar_expanded = True
        
        # Marcar como inicializado
        st.session_state.initialized = True
        
        logger.info("Estado do aplicativo inicializado com valores padr√£o")

# Fun√ß√£o para gerenciar a navega√ß√£o entre p√°ginas
def handle_navigation():
    """Gerencia transi√ß√µes entre p√°ginas e atualiza dados quando necess√°rio"""
    # Verificar se √© necess√°rio recarregar dados do usu√°rio ao navegar
    current_page = st.session_state.page  # Use 'page' em vez de 'current_page'
    previous_page = st.session_state.previous_page
    
    if (current_page != previous_page and 
        st.session_state.authenticated and st.session_state.email):
        
        # Recarregar dados ao mudar entre p√°ginas principais
        try:
            # Recarregar a classe UserManager para garantir dados atualizados
            st.session_state.user_manager = UserManager()
            # Limpar qualquer cache que possa existir para estat√≠sticas
            if hasattr(st.session_state, 'user_stats_cache'):
                del st.session_state.user_stats_cache
            # Log da atualiza√ß√£o
            logger.info(f"Dados de usu√°rio recarregados na transi√ß√£o de {previous_page} para {current_page}")
        except Exception as e:
            logger.error(f"Erro ao atualizar dados do usu√°rio: {str(e)}")

# Renderiza bot√µes de navega√ß√£o na sidebar
def render_sidebar_navigation():
    """Renderiza os bot√µes de navega√ß√£o na sidebar e retorna True se algum bot√£o foi clicado"""
    # Adiciona separador para melhor UI
    st.sidebar.markdown("---")
    
    nav_clicked = False
    
    # Bot√£o para ir para a p√°gina de pacotes
    if st.sidebar.button("üöÄ Ver Pacotes de Cr√©ditos", key="nav_packages_btn", use_container_width=True):
        st.session_state.previous_page = st.session_state.page  # Use 'page' em vez de 'current_page'
        st.session_state.page = 'packages'  # Use 'page' em vez de 'current_page'
        nav_clicked = True
    
    # Bot√£o de logout
    if st.sidebar.button("Logout", key="nav_logout_btn", use_container_width=True):
        st.session_state.authenticated = False
        st.session_state.email = None
        st.session_state.previous_page = st.session_state.page
        st.session_state.page = 'login'  # Ou qualquer p√°gina de login que voc√™ use
        nav_clicked = True
    
    # Se estamos em modo debug, adicionar op√ß√µes de depura√ß√£o
    if hasattr(st.session_state, 'debug_mode') and st.session_state.debug_mode:
        st.sidebar.markdown("---")
        st.sidebar.markdown("### Debug Options")
        
        # Bot√£o para limpar todo o cache
        if st.sidebar.button("üßπ Clear All Cache", key="clear_all_cache_btn"):
            from utils.footystats_api import clear_all_cache
            num_cleared = clear_all_cache()
            st.sidebar.success(f"Cleared {num_cleared} cache files")
            nav_clicked = True
    
    return nav_clicked

# Fun√ß√£o principal do aplicativo
def main():
    """Fun√ß√£o principal que controla o fluxo do aplicativo"""
    # Inicializar estado do aplicativo
    initialize_app_state()
    
    # Verificar par√¢metros de URL para navega√ß√£o
    query_params = st.experimental_get_query_params()
    if "page" in query_params:
        requested_page = query_params["page"][0]
        if requested_page != st.session_state.page:
            st.session_state.previous_page = st.session_state.page
            st.session_state.page = requested_page
            # Remover par√¢metro para evitar navega√ß√£o duplicada
            st.experimental_set_query_params()
    
    # Verificar autentica√ß√£o para p√°ginas protegidas
    if not st.session_state.authenticated or not st.session_state.email:
        # Se voc√™ n√£o tem uma p√°gina de login separada, use a fun√ß√£o go_to_login
        go_to_login()
        return
    
    # Aplicar estilos personalizados para p√°ginas autenticadas
    apply_custom_styles()
    
    # Configurar sidebar (se vis√≠vel na p√°gina atual)
    if st.session_state.page != 'packages':  # Ocultar na p√°gina de pacotes
        # Configurar toggle da sidebar
        configure_sidebar_toggle()
        
        # Mostrar conte√∫do da sidebar
        with st.sidebar:
            st.title("ValueHunter")
            st.markdown("---")
            
            # Mostrar estat√≠sticas de uso
            show_usage_stats()
            
            # Mostrar sele√ß√µes espec√≠ficas da p√°gina principal
            if st.session_state.page == 'main':
                # Escolha da liga
                selected_league = get_league_selection(key_suffix="_main_dashboard")
                if selected_league:
                    # Nota sobre carregamento
                    st.info("Os times s√£o carregados automaticamente ao selecionar uma liga.")
                
                # Separador
                st.markdown("---")
            
            # Verificar bot√µes de navega√ß√£o (deve ser o √∫ltimo elemento da sidebar)
            if render_sidebar_navigation():
                # Se algum bot√£o foi clicado, processar navega√ß√£o
                handle_navigation()
                st.experimental_rerun()
    
    # Renderizar a p√°gina correta baseado no estado atual
    if st.session_state.page == 'main':
        show_main_dashboard()
    elif st.session_state.page == 'packages':
        show_packages_page()
    else:
        # P√°gina n√£o encontrada, redirecionar para dashboard
        logger.warning(f"P√°gina n√£o reconhecida: {st.session_state.page}, redirecionando para dashboard")
        st.session_state.page = 'main'
        st.experimental_rerun()

# Execu√ß√£o principal
if __name__ == "__main__":
    # Iniciar aplicativo
    try:
        main()
    except Exception as e:
        logger.error(f"Erro fatal na execu√ß√£o do aplicativo: {str(e)}")
        
        # Exibir mensagem amig√°vel para o usu√°rio
        st.error("Ocorreu um erro inesperado. Por favor, recarregue a p√°gina e tente novamente.")
        
        # Em modo de depura√ß√£o, mostrar detalhes adicionais
        if hasattr(st.session_state, 'debug_mode') and st.session_state.debug_mode:
            import traceback
            st.code(traceback.format_exc())
